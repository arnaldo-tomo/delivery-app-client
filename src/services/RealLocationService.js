// src/services/RealLocationService.js - SERVI√áO DE LOCALIZA√á√ÉO REAL
import * as Location from 'expo-location';
import { Alert } from 'react-native';

class RealLocationService {
  constructor() {
    this.watchId = null;
    this.currentLocation = null;
    this.lastKnownLocation = null;
  }

  /**
   * ‚úÖ SOLICITAR PERMISS√ÉO DE LOCALIZA√á√ÉO
   */
  async requestLocationPermission() {
    try {
      console.log('üìç Verificando permiss√µes de localiza√ß√£o...');
      
      // Verificar permiss√£o atual
      let { status } = await Location.getForegroundPermissionsAsync();
      
      if (status !== 'granted') {
        console.log('üîê Solicitando permiss√£o...');
        const permissionResult = await Location.requestForegroundPermissionsAsync();
        status = permissionResult.status;
      }

      if (status !== 'granted') {
        throw new Error('Permiss√£o de localiza√ß√£o negada');
      }

      console.log('‚úÖ Permiss√£o de localiza√ß√£o concedida');
      return true;
    } catch (error) {
      console.log('‚ùå Erro na permiss√£o:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ OBTER LOCALIZA√á√ÉO ATUAL REAL DO DISPOSITIVO
   */
  async getCurrentRealLocation(options = {}) {
    try {
      await this.requestLocationPermission();
      
      console.log('üéØ Obtendo localiza√ß√£o GPS atual...');
      
      const locationOptions = {
        accuracy: Location.Accuracy.High,
        timeInterval: 1000,
        distanceInterval: 1,
        ...options
      };

      // Tentar v√°rias vezes se necess√°rio
      let attempts = 0;
      const maxAttempts = 3;
      
      while (attempts < maxAttempts) {
        try {
          console.log(`üì° Tentativa ${attempts + 1} de obter GPS...`);
          
          const location = await Location.getCurrentPositionAsync(locationOptions);
          
          const coords = {
            latitude: location.coords.latitude,
            longitude: location.coords.longitude,
            accuracy: location.coords.accuracy,
            timestamp: location.timestamp
          };

          this.currentLocation = coords;
          this.lastKnownLocation = coords;
          
          console.log('üìç Localiza√ß√£o obtida:', {
            lat: coords.latitude.toFixed(6),
            lng: coords.longitude.toFixed(6),
            accuracy: `${coords.accuracy?.toFixed(0)}m`
          });

          return coords;
          
        } catch (attemptError) {
          attempts++;
          console.log(`‚ö†Ô∏è Tentativa ${attempts} falhou:`, attemptError.message);
          
          if (attempts >= maxAttempts) {
            throw attemptError;
          }
          
          // Esperar antes da pr√≥xima tentativa
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao obter localiza√ß√£o:', error);
      
      // Retornar √∫ltima localiza√ß√£o conhecida se dispon√≠vel
      if (this.lastKnownLocation) {
        console.log('üîÑ Usando √∫ltima localiza√ß√£o conhecida');
        return this.lastKnownLocation;
      }
      
      throw error;
    }
  }

  /**
   * ‚úÖ CONVERTER COORDENADAS EM ENDERE√áO REAL
   */
  async getRealAddressFromCoordinates(latitude, longitude) {
    try {
      console.log('üè† Convertendo coordenadas em endere√ßo...');
      console.log(`üìç Coords: ${latitude.toFixed(6)}, ${longitude.toFixed(6)}`);
      
      // Usar reverse geocoding nativo do Expo
      const results = await Location.reverseGeocodeAsync(
        { latitude, longitude },
        { useGoogleMaps: false }
      );

      if (results && results.length > 0) {
        const address = results[0];
        console.log('üèòÔ∏è Dados do endere√ßo encontrados:', address);
        
        // Construir endere√ßo detalhado
        const addressComponents = this.buildDetailedAddress(address);
        
        return {
          fullAddress: addressComponents.full,
          street: addressComponents.street,
          neighborhood: addressComponents.neighborhood,
          city: addressComponents.city,
          state: addressComponents.state,
          country: addressComponents.country,
          postalCode: address.postalCode || null,
          raw: address
        };
      } else {
        console.log('‚ö†Ô∏è Nenhum endere√ßo encontrado para essas coordenadas');
        return null;
      }
    } catch (error) {
      console.log('‚ùå Erro no reverse geocoding:', error);
      return null;
    }
  }

  /**
   * ‚úÖ CONSTRUIR ENDERE√áO DETALHADO
   */
  buildDetailedAddress(addressData) {
    const parts = [];
    const streetParts = [];
    
    // Construir parte da rua
    if (addressData.street) streetParts.push(addressData.street);
    if (addressData.streetNumber) streetParts.push(addressData.streetNumber);
    
    // Montar endere√ßo completo
    if (streetParts.length > 0) parts.push(streetParts.join(', '));
    if (addressData.district) parts.push(addressData.district);
    if (addressData.subregion && addressData.subregion !== addressData.district) {
      parts.push(addressData.subregion);
    }
    if (addressData.city) parts.push(addressData.city);
    if (addressData.region && addressData.region !== addressData.city) {
      parts.push(addressData.region);
    }
    if (addressData.country && addressData.country !== 'Mozambique') {
      parts.push(addressData.country);
    }

    return {
      full: parts.join(', '),
      street: streetParts.join(', ') || null,
      neighborhood: addressData.district || addressData.subregion || null,
      city: addressData.city || null,
      state: addressData.region || null,
      country: addressData.country || null
    };
  }

  /**
   * ‚úÖ OBTER LOCALIZA√á√ÉO COMPLETA (COORDENADAS + ENDERE√áO)
   */
  async getCompleteRealLocation() {
    try {
      console.log('üåç Obtendo localiza√ß√£o completa...');
      
      // 1. Obter coordenadas GPS
      const coords = await this.getCurrentRealLocation();
      
      // 2. Converter em endere√ßo
      const addressInfo = await this.getRealAddressFromCoordinates(
        coords.latitude, 
        coords.longitude
      );

      const result = {
        coordinates: coords,
        address: addressInfo,
        success: true,
        timestamp: Date.now()
      };

      console.log('‚úÖ Localiza√ß√£o completa obtida:', {
        coords: `${coords.latitude.toFixed(6)}, ${coords.longitude.toFixed(6)}`,
        address: addressInfo?.fullAddress || 'Endere√ßo n√£o encontrado'
      });

      return result;
      
    } catch (error) {
      console.log('‚ùå Erro ao obter localiza√ß√£o completa:', error);
      
      return {
        coordinates: null,
        address: null,
        success: false,
        error: error.message,
        timestamp: Date.now()
      };
    }
  }

  /**
   * ‚úÖ VERIFICAR SE DEVICE SUPORTA GPS
   */
  async checkGPSAvailability() {
    try {
      const isLocationEnabled = await Location.hasServicesEnabledAsync();
      
      if (!isLocationEnabled) {
        throw new Error('GPS est√° desativado. Ative nas configura√ß√µes do dispositivo.');
      }

      return true;
    } catch (error) {
      console.log('‚ùå GPS n√£o dispon√≠vel:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ MOSTRAR DI√ÅLOGO DE ERRO COM SUGEST√ïES
   */
  showLocationErrorDialog(error) {
    let title = 'Erro de Localiza√ß√£o';
    let message = 'N√£o foi poss√≠vel obter sua localiza√ß√£o';
    let suggestions = [];

    if (error.message.includes('denied')) {
      title = 'Permiss√£o Negada';
      message = 'Para melhor experi√™ncia, permita o acesso √† localiza√ß√£o';
      suggestions = [
        '‚Ä¢ V√° em Configura√ß√µes > Privacidade > Localiza√ß√£o',
        '‚Ä¢ Ative a localiza√ß√£o para este app',
        '‚Ä¢ Tente novamente'
      ];
    } else if (error.message.includes('GPS')) {
      title = 'GPS Desativado';
      message = 'O GPS precisa estar ativado para obter sua localiza√ß√£o';
      suggestions = [
        '‚Ä¢ Ative o GPS nas configura√ß√µes',
        '‚Ä¢ Certifique-se de estar em local aberto',
        '‚Ä¢ Tente novamente em alguns segundos'
      ];
    } else if (error.message.includes('network') || error.message.includes('timeout')) {
      title = 'Conex√£o';
      message = 'Verifique sua conex√£o com a internet';
      suggestions = [
        '‚Ä¢ Verifique sua conex√£o Wi-Fi/dados m√≥veis',
        '‚Ä¢ Tente novamente'
      ];
    }

    const fullMessage = suggestions.length > 0 
      ? `${message}\n\n${suggestions.join('\n')}`
      : message;

    Alert.alert(title, fullMessage, [
      { text: 'OK', style: 'default' }
    ]);
  }

  /**
   * ‚úÖ INICIAR MONITORAMENTO DE LOCALIZA√á√ÉO
   */
  async startLocationTracking(callback, options = {}) {
    try {
      await this.requestLocationPermission();
      
      const trackingOptions = {
        accuracy: Location.Accuracy.High,
        timeInterval: 5000, // 5 segundos
        distanceInterval: 10, // 10 metros
        ...options
      };

      console.log('üìç Iniciando rastreamento de localiza√ß√£o...');

      this.watchId = await Location.watchPositionAsync(
        trackingOptions,
        (location) => {
          const coords = {
            latitude: location.coords.latitude,
            longitude: location.coords.longitude,
            accuracy: location.coords.accuracy,
            timestamp: location.timestamp
          };

          this.currentLocation = coords;
          this.lastKnownLocation = coords;

          if (callback) {
            callback(coords);
          }
        }
      );

      console.log('‚úÖ Rastreamento iniciado');
      return this.watchId;
      
    } catch (error) {
      console.log('‚ùå Erro ao iniciar rastreamento:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ PARAR MONITORAMENTO
   */
  stopLocationTracking() {
    if (this.watchId) {
      this.watchId.remove();
      this.watchId = null;
      console.log('üõë Rastreamento de localiza√ß√£o parado');
    }
  }

  /**
   * ‚úÖ CALCULAR DIST√ÇNCIA ENTRE DOIS PONTOS
   */
  calculateDistance(point1, point2) {
    const R = 6371; // Raio da Terra em km
    const dLat = (point2.latitude - point1.latitude) * Math.PI / 180;
    const dLon = (point2.longitude - point1.longitude) * Math.PI / 180;
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(point1.latitude * Math.PI / 180) * Math.cos(point2.latitude * Math.PI / 180) *
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  }

  /**
   * ‚úÖ LIMPAR CACHE
   */
  clearCache() {
    this.currentLocation = null;
    this.lastKnownLocation = null;
    console.log('üßπ Cache de localiza√ß√£o limpo');
  }
}

// Export singleton instance
export default new RealLocationService();